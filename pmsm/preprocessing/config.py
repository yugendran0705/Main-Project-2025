"""Configuration file"""

debug_cfg = {'DEBUG': False,
             'choose_debug_on_gpu_availability': False,
             'n_debug': 2000,  # first n timestamps to use if debug
             }

data_cfg = {
    'Input_param_names': ['ambient',
                          'coolant',
                          'u_d',
                          'u_q',
                          'motor_speed',
                          #'torque',
                          'i_d',
                          'i_q'
                           ],
    'Target_param_names': ['pm',
                           'stator_yoke',
                           'stator_tooth',
                           'stator_winding'
                          ],
    # for ewm and statistical moments
    'rolling_lookback': [840, 6360, 3360, 1320],
    'valset': [81],
    'testset': [65, 72],
    'loss': 'mse',
    # profile ids to drop (don't need to actually exist)
    'drop': None,  #[p for p in range(40, 400)],  #['46', '47'],

    # paths
    'file_path': "pmsm/data/input/measures.csv",
    'db_path': 'pmsm/data/results_lea38.db',
    'model_dump_path': 'pmsm/data/output/',
    'save_predictions': True,
    'random_seed': 2019,
    'downsample_rate': 1,
    'downsample_val_test': True,
    'db_target_scheme': ['pm', 'stator_yoke', 'stator_tooth', 'stator_winding'],
    }


plot_cfg = {'do_plot': True, }

keras_cfg = {
    'early_stop_patience': 30,
    # 'early_stop_patience': 3,
    'n_trials': 3,
    'set_gpu_device': True,
    'gpu_auto_set': True,
    'gpu_device': "1",
    # the following flag will override params-batch_size with num profiles
    'full_data_as_batch': True,  # shorter profiles will be padded with zero
    'tbptt_len': 128,  # in half-seconds
    # x hrs sampled at half-seconds, required for chrono init in LSTMs
    'max_time_step': 2.4 * 60 * 60 * 2 / data_cfg['downsample_rate'],
    'rnn_params': {
                'batch_size': 16,
                #    'activity_reg': 0.00003,
                #    'arch': 'res_lstm',
                #    'bias_reg': 0.00001,
                #    'clipnorm': 0.25,
                #    'clipvalue': 0.01,
                #    'dropout_rate': 0.3, 
                   'epochs': 150,
                #    'gauss_noise_std': 0.01,
                #    'kernel_reg': 0.1,
                #    'lr_rate': 0.01,
                #    'n_layers': 1, 
                #    'n_units': 4,
                    # 'loss': mean_squared_error,
                   'optimizer': 'adam',
                    'optimizer__learning_rate': 0.01,
                #    'recurrent_reg': 0.01
                },
    'window_size': 32,  # lookback,
    'cnn_params': {'batch_size': 128,
                   'epochs': 150,
                   'arch': 'res',
                   'activation': 'relu',
                   'n_layers': 2,
                   'n_units': 4,
                   'kernel_size': 2,
                   'dilation_start_rate': 1,
                   'regularization_rate': 1e-8,
                   'dropout_rate': 0.3,
                   'optimizer': 'adam',
                   'lr_rate': 1e-4,
                   # 'clipnorm': 15,  # do not do this for CNNS! no problem
                   # with exploding gradients!
                   # 'clipvalue': .5,
                   },
    'snn_params': {'batch_size': 512,
                   'epochs': 50,
                   #'arch': 'res',
                   #'activation': 'relu',
                   'n_layers': 1,
                   'n_units': 8,
                   'dropout_rate': 0.0,
                   'kernel_reg':1e-5,
                   'activity_reg':1e-5,
                   'bias_reg':1e-9,
                   'gauss_noise_std': 1e-9,
                   'lr_rate': 1e-3,
                   },
    'hp_skopt_space_rnn': {
        'arch': ['lstm', 'gru', 'res_lstm'],
        'n_layers': (1, 7),
        'n_units': (4, 256),
        'kernel_reg': (1e-9, 1e-1, 'log-uniform'),
        'activity_reg': (1e-9, 1e-1, 'log-uniform'),
        'recurrent_reg': (1e-9, 1e-1, 'log-uniform'),
        'bias_reg': (1e-9, 1e-1, 'log-uniform'),
        'dropout_rate': (0.1, 0.5, 'uniform'),
        # 'optimizer': ['adam', 'nadam', 'adamax', 'sgd', 'rmsprop'],
        'lr_rate': (1e-7, 1e-2, 'log-uniform'),
        'gauss_noise_std': (1e-9, 1e-2, 'log-uniform'),
        'clipnorm': (0.25, 15, 'uniform'),
        'clipvalue': (0.01, 1, 'log-uniform'),
        # non-init-specific
        'tbptt_len': (1, 128),
        'downsample_rate': (1, 32),
        'rolling_lb_1': (500, 1500, 'uniform'),
        'rolling_lb_2': (2000, 3000, 'uniform'),
        'rolling_lb_3': (4000, 6000, 'uniform'),
        'rolling_lb_4': (7000, 9000, 'uniform'),

    },
    'hp_skopt_space_cnn': {
        'arch': ['plain', 'res'],
        'n_layers': (1, 5),
        'n_units': (4, 256),
        'regularization_rate': (1e-9, 1e-1, 'log-uniform'),
        'dropout_rate': (0.2, 0.5, 'uniform'),
        # 'optimizer': ['adam', 'nadam', 'adamax', 'sgd', 'rmsprop'],
        'lr_rate': (1e-7, 1e-2, 'log-uniform'),
        'kernel_size': (2, 7),
        # non-init-specific
        'window_size': (8, 128),
        'rolling_lb_1': (500, 1500, 'uniform'),
        'rolling_lb_2': (2000, 3000, 'uniform'),
        'rolling_lb_3': (4000, 6000, 'uniform'),
        'rolling_lb_4': (7000, 9000, 'uniform'),
    },

    'hp_tune_params':
        {'n_iter': 50,
         'n_init_points': 15,
         'seeds_per_trial': 5,
         'n_jobs': 1,  # todo: to implement
         'found_params': {'activity_reg': 5.19e-05,
                          'arch': 'lstm',
                          'bias_reg': 2.43e-06,
                          'clipnorm': 3.574,
                          'clipvalue': 1.,
                          'dropout_rate': 0.41576,
                          'epochs': 150,
                          'gauss_noise_std': 7.836e-08,
                          'kernel_reg': 0.1,
                          'lr_rate': 4.16e-05,
                          'n_layers': 1,
                          'n_units': 112,
                          'optimizer': 'adam',
                          'recurrent_reg': 0.02541737}
         },
    'rnn_debug_params': {
        'batch_size': -1,
        'activity_reg': 0.006206179224011181,
        'arch': 'gru',
        'bias_reg': 0.004050373733242869,
        'clipnorm': 0.5265368902155119,
        'clipvalue': 0.096423838212308,
        'dropout_rate': 0.24369343658092174,
        'epochs': 150,
        'gauss_noise_std': 5.113068286200495e-09,
        'kernel_reg': 9.384031764502752e-08,
        'lr_rate': 0.0002551480108992444,
        'n_layers': 6, 'n_units': 166,
        'optimizer': 'adam',
        'recurrent_reg': 0.05746263583611155}

}

lgbm_cfg = {
    'n_trials': 3,
    'params': {'n_estimators': 5000,
               #'colsample_bytree': 0.67143,
               #'num_leaves': 180,
               #'scale_pos_weight': 6427,
               #'max_depth': 48,
               #'min_child_weight': 10.11,
               },
    'params_found_by_skopt': {'n_estimators': 10000,
                              'scale_pos_weight': 10000.0,
                              'min_child_weight': 2.2756358867092463,
                              'num_leaves': 232,
                              'random_state': 2000,
                              'colsample_bytree': 0.4947227023598322,
                              'max_depth': 29},
    'hp_skopt_space': {'num_leaves': (2, 256),
                      'max_depth': (2, 64),
                      'scale_pos_weight': (1, 10000, 'uniform'),
                      'colsample_bytree': (0.3, 1.0, 'log-uniform'),
                      'min_child_weight': (0.01, 1000, 'log-uniform'),
                      'random_state': (2000, 3000)  # arbitrary
                      },
    'hp_n_iter': 50,
    'hp_n_init_points': 15,
    'hp_skopt_broad_space': {
        'learning_rate': (0.01, 1.0, 'log-uniform'),
        'num_leaves': (2, 256),
        'max_depth': (0, 48),
        'min_child_samples': (0, 50),
        'max_bin': (100, 1000),
        'subsample': (0.01, 1.0, 'uniform'),
        'subsample_freq': (0, 10),
        'colsample_bytree': (0.01, 1.0, 'uniform'),
        'min_child_weight': (0, 10),
        'subsample_for_bin': (100000, 500000),
        'reg_lambda': (1e-9, 1000, 'log-uniform'),
        'reg_alpha': (1e-9, 1.0, 'log-uniform'),
        'scale_pos_weight': (1e-6, 500, 'log-uniform'),
        'n_estimators': (2000, 5000),
    }
}



bayes_cfg = {
    'hp_skopt_cnn_known_evals': [
        {'arch': 'res',
         'n_layers': 1,
         'n_units': 64,
         'regularization_rate': 1e-6,
         'dropout_rate': 0.5,
         'lr_rate': 1e-4,
         'kernel_size': 2,
         # non-init-specific
         'window_size': 8,
         'rolling_lb_1': 1024,
         'rolling_lb_2': 2048,
         'rolling_lb_3': 4096,
         'rolling_lb_4': 8192,
         'y_stator': 12.6254,  # stator
         'y_rotor': 11.0633,  # rotor
         },
        {'arch': 'plain',
         'n_layers': 1,
         'n_units': 64,
         'regularization_rate': 1e-6,
         'dropout_rate': 0.5,
         'lr_rate': 1e-4,
         'kernel_size': 2,
         # non-init-specific
         'window_size': 16,
         'rolling_lb_1': 1024,
         'rolling_lb_2': 2048,
         'rolling_lb_3': 4096,
         'rolling_lb_4': 8192,
         'y_stator': 8.885,  # stator
         'y_rotor': 7.8228,  # rotor
         },
        {'arch': 'res',
         'n_layers': 2,
         'n_units': 64,
         'regularization_rate': 1e-6,
         'dropout_rate': 0.5,
         'lr_rate': 1e-4,
         'kernel_size': 3,
         # non-init-specific
         'window_size': 32,
         'rolling_lb_1': 1024,
         'rolling_lb_2': 2048,
         'rolling_lb_3': 4096,
         'rolling_lb_4': 8192,
         'y_stator': 2.805,  # stator
         'y_rotor': 2.351,  # rotor
         }
    ],
    'hp_skopt_rnn_known_evals': [
         {'arch': 'res_lstm',
          'n_layers': 3,
          'n_units': 64,
          'kernel_reg': 0.001016734458835989,
          'activity_reg': 3.84268337375276e-08,
          'recurrent_reg': 0.003126579318323542,
          'bias_reg': 0.01532432114284632,
          'dropout_rate': 0.4403311958097841,
          # 'optimizer': ['adam', 'nadam', 'adamax', 'sgd', 'rmsprop'],
          'lr_rate': 0.0012622890377128758,
          'gauss_noise_std': 2.4893717370870127e-09,
          'clipnorm': 9.725679986371984,
          'clipvalue': 0.019904502951294638,
          # non-init-specific
          'tbptt_len': 32,
          'downsample_rate': 1,
          'rolling_lb_1': 1024,
          'rolling_lb_2': 2048,
          'rolling_lb_3': 4096,
          'rolling_lb_4': 8192,
          'y_stator': 4.134,
          'y_rotor': 5.303},
         {'arch': 'res_lstm',
          'n_layers': 3,
          'n_units': 40,
          'kernel_reg': 0.003,
          'activity_reg': 0.003,
          'recurrent_reg': 0.003,
          'bias_reg': 0.01,
          'dropout_rate': 0.5,
          # 'optimizer': ['adam', 'nadam', 'adamax', 'sgd', 'rmsprop'],
          'lr_rate': 0.001,
          'gauss_noise_std': 2.4893717370870127e-09,
          'clipnorm': 5,
          'clipvalue': 0.01,
          # non-init-specific
          'tbptt_len': 64,
          'downsample_rate': 1,
          'rolling_lb_1': 1024,
          'rolling_lb_2': 2048,
          'rolling_lb_3': 4096,
          'rolling_lb_4': 8192,
          'y_stator': 3.038,
          'y_rotor': 5.417},
         {'arch': 'res_lstm',
          'n_layers': 3,
          'n_units': 40,
          'kernel_reg': 0.01,
          'activity_reg': 0.003,
          'recurrent_reg': 0.01,
          'bias_reg': 0.01,
          'dropout_rate': 0.5,
          # 'optimizer': ['adam', 'nadam', 'adamax', 'sgd', 'rmsprop'],
          'lr_rate': 0.001,
          'gauss_noise_std': 2.4893717370870127e-09,
          'clipnorm': 5,
          'clipvalue': 0.01,
          # non-init-specific
          'tbptt_len': 100,
          'downsample_rate': 2,
          'rolling_lb_1': 1024,
          'rolling_lb_2': 2048,
          'rolling_lb_3': 4096,
          'rolling_lb_4': 8192,
          'y_stator': 4.144,
          'y_rotor': 4.372}
    ]
}
